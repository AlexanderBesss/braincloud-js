diff --git a/lib/brainCloudClient.concat.js b/lib/brainCloudClient.concat.js
index ed04d6f..751c747 100644
--- a/lib/brainCloudClient.concat.js
+++ b/lib/brainCloudClient.concat.js
@@ -325,10 +325,7 @@ function BrainCloudManager ()
         {
             callback = bcm._inProgressQueue[c].callback;
 
-            if (callback)
-            {
-                callback(messages[c]);
-            }
+
 
             if (bcm._inProgressQueue[c] != null && bcm._errorCallback && essages[c].status != 200)
             {
@@ -412,8 +409,12 @@ function BrainCloudManager ()
 
                 console.log("STATUSCodes:" + bcm.statusCodes.CLIENT_NETWORK_ERROR);
                 bcm.updateKillSwitch(bcm._inProgressQueue[c].service, bcm._inProgressQueue[c].operation, statusCode)
+			}
+			
+            if (callback)
+            {
+                callback(messages[c]);
             }
-
             var events = response["events"];
             if (events && bcm._eventCallback)
             {
@@ -5696,363 +5697,363 @@ function BCMail() {
 }
 
 BCMail.apply(window.brainCloudClient = window.brainCloudClient || {});
-
-function BCMatchMaking() {
-    var bc = this;
-
-	bc.matchMaking = {};
-
-	bc.SERVICE_MATCH_MAKING = "matchMaking";
-
-	bc.matchMaking.OPERATION_READ                             = "READ";
-	bc.matchMaking.OPERATION_SET_PLAYER_RATING                = "SET_PLAYER_RATING";
-	bc.matchMaking.OPERATION_RESET_PLAYER_RATING              = "RESET_PLAYER_RATING";
-	bc.matchMaking.OPERATION_INCREMENT_PLAYER_RATING          = "INCREMENT_PLAYER_RATING";
-	bc.matchMaking.OPERATION_DECREMENT_PLAYER_RATING          = "DECREMENT_PLAYER_RATING";
-	bc.matchMaking.OPERATION_TURN_SHIELD_ON                   = "SHIELD_ON";
-	bc.matchMaking.OPERATION_TURN_SHIELD_ON_FOR               = "SHIELD_ON_FOR";
-	bc.matchMaking.OPERATION_TURN_SHIELD_OFF                  = "SHIELD_OFF";
-    bc.matchMaking.OPERATION_INCREMENT_SHIELD_ON_FOR          = "INCREMENT_SHIELD_ON_FOR";
-	bc.matchMaking.OPERATION_GET_SHIELD_EXPIRY                = "GET_SHIELD_EXPIRY";
-	bc.matchMaking.OPERATION_FIND_PLAYERS                     = "FIND_PLAYERS";
-	bc.matchMaking.OPERATION_FIND_PLAYERS_USING_FILTER        = "FIND_PLAYERS_USING_FILTER";
-	bc.matchMaking.OPERATION_ENABLE_MATCH_MAKING              = "ENABLE_FOR_MATCH";
-	bc.matchMaking.OPERATION_DISABLE_MATCH_MAKING             = "DISABLE_FOR_MATCH";
-
-
-	/**
-	 * Read match making record
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - Read
-	 *
-	 * @param callback The method to be invoked when the server response is received
-	 */
-	bc.matchMaking.read = function(callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_READ,
-			data: {},
-			callback: callback
-		});
-	};
-
-	/**
-	 * Sets player rating
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - SetPlayerRating
-	 *
-	 * @param playerRating The new player rating.
-	 * @param callback The method to be invoked when the server response is received
-	 */
-	bc.matchMaking.setPlayerRating = function(playerRating, callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_SET_PLAYER_RATING,
-			data: {
-				playerRating: playerRating
-			},
-			callback: callback
-		});
-	};
-
-	/**
-	 * Resets player rating
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - ResetPlayerRating
-	 *
-	 * @param callback The callback function
-	 */
-	bc.matchMaking.resetPlayerRating = function(callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_RESET_PLAYER_RATING,
-			data: {},
-			callback: callback
-		});
-	};
-
-	/**
-	 * Increments player rating
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - IncrementPlayerRating
-	 *
-	 * @param increment The increment amount
-	 * @param callback The callback function
-	 */
-	bc.matchMaking.incrementPlayerRating = function(increment, callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_INCREMENT_PLAYER_RATING,
-			data: {
-				playerRating: increment
-			},
-			callback: callback
-		});
-	};
-
-	/**
-	 * Decrements player rating
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - DecrementPlayerRating
-	 *
-	 * @param decrement The decrement amount
-	 * @param callback The callback function
-	 */
-	bc.matchMaking.decrementPlayerRating = function(decrement, callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_DECREMENT_PLAYER_RATING,
-			data: {
-				playerRating: decrement
-			},
-			callback: callback
-		});
-	};
-
-
-	/**
-	 * Turns shield on
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - ShieldOn
-	 *
-	 * @param callback The callback function
-	 */
-	bc.matchMaking.turnShieldOn = function(callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_TURN_SHIELD_ON,
-			data: {},
-			callback: callback
-		});
-	};
-
-
-	/**
-	 * Turns shield on for the specified number of minutes
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - ShieldOnFor
-	 *
-	 * @param minutes Number of minutes to turn the shield on for
-	 * @param callback The callback function
-	 */
-	bc.matchMaking.turnShieldOnFor = function(minutes, callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_TURN_SHIELD_ON_FOR,
-			data: {
-				minutes: minutes
-			},
-			callback: callback
-		});
-	};
-
-
-	/**
-	 * Turns shield off
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - ShieldOff
-	 *
-	 * @param callback The callback function
-	 */
-	bc.matchMaking.turnShieldOff = function(callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_TURN_SHIELD_OFF,
-			data: {},
-			callback: callback
-		});
-	};
-
-    /**
-     * Increases the shield on time by specified number of minutes
-     *
-     * Service Name - MatchMaking
-     * Service Operation - IncrementShieldOnFor
-     *
-     * @param minutes Number of minutes to increase the shield time for
-     * @param callback The callback function
-     */
-    bc.matchMaking.incrementShieldOnFor = function(minutes, callback) {
-        bc.brainCloudManager.sendRequest({
-            service: bc.SERVICE_MATCH_MAKING,
-            operation: bc.matchMaking.OPERATION_INCREMENT_SHIELD_ON_FOR,
-            data: {
-                minutes: minutes
-            },
-            callback: callback
-        });
-    };
-
-
-	/**
-	 * Gets the shield expiry for the given player id. Passing in a null player id
-	 * will return the shield expiry for the current player. The value returned is
-	 * the time in UTC millis when the shield will expire.
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - GetShieldExpiry
-	 *
-	 * @param playerId The player id or use null to retrieve for the current player
-	 * @param callback The callback.
-	 */
-	bc.matchMaking.getShieldExpiry = function(playerId, callback) {
-		var data = {};
-		if (playerId)
-		{
-			data["playerId"] = playerId;
-		}
-
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_GET_SHIELD_EXPIRY,
-			data: data,
-			callback: callback
-		});
-	};
-
-
-	/**
-	 * Finds matchmaking enabled players
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - FIND_PLAYERS
-	 *
-	 * @param rangeDelta The range delta
-	 * @param numMatches The maximum number of matches to return
-	 * @param callback The callback.
-	 */
-	bc.matchMaking.findPlayers = function(rangeDelta, numMatches, callback) {
-		bc.matchMaking.findPlayersWithAttributes(rangeDelta, numMatches, null, callback);
-	};
-
-	/**
-	 * Finds matchmaking enabled players with additional attributes
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - FIND_PLAYERS
-	 *
-	 * @param rangeDelta The range delta
-	 * @param numMatches The maximum number of matches to return
-	 * @param jsonAttributes Attributes match criteria
-	 * @param callback The method to be invoked when the server response is received
-	 */
-	bc.matchMaking.findPlayersWithAttributes = function(rangeDelta, numMatches, jsonAttributes, callback) {
-		var data = {
-			rangeDelta: rangeDelta,
-			numMatches: numMatches
-		};
-
-		if (jsonAttributes) {
-			data.attributes = jsonAttributes;
-		}
-
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_FIND_PLAYERS,
-			data: data,
-			callback: callback
-		});
-	};
-
-	/**
-	 * @deprecated Use findPlayersUsingFilter instead - Removal after June 21 2016
-	 */
-	bc.matchMaking.findPlayersWithFilter = function(rangeDelta, numMatches, extraParms, callback) {
-		bc.matchMaking.findPlayersUsingFilter(rangeDelta, numMatches, extraParms, callback);
-	};
-
-	/**
-	 * Finds matchmaking enabled players
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - FIND_PLAYERS_WITH_FILTER
-	 *
-	 * @param rangeDelta The range delta
-	 * @param numMatches The maximum number of matches to return
-	 * @param extraParms Other parameters
-	 * @param callback The callback.
-	 */
-	bc.matchMaking.findPlayersUsingFilter = function(rangeDelta, numMatches, extraParms, callback) {
-		bc.matchMaking.findPlayersWithAttributesUsingFilter(rangeDelta, numMatches, null, extraParms, callback);
-	};
-
-	/**
-	 * Finds matchmaking enabled players using a cloud code filter
-	 * and additional attributes
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - FIND_PLAYERS_USING_FILTER
-	 *
-	 * @param rangeDelta The range delta
-	 * @param numMatches The maximum number of matches to return
-	 * @param jsonAttributes Attributes match criteria
-	 * @param jsonExtraParms Parameters to pass to the CloudCode filter script
-	 * @param callback The method to be invoked when the server response is received
-	 */
-	bc.matchMaking.findPlayersWithAttributesUsingFilter = function(rangeDelta, numMatches, jsonAttributes, extraParms, callback) {
-		var data = {
-			rangeDelta: rangeDelta,
-			numMatches: numMatches
-		};
-		if (jsonAttributes) {
-			data.attributes = jsonAttributes;
-		}
-		if (extraParms) {
-			data.extraParms = extraParms;
-		}
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_FIND_PLAYERS_USING_FILTER,
-			data: data,
-			callback: callback
-		});
-	};
-
-	/**
-	 * Enables Match Making for the Player
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - EnableMatchMaking
-	 *
-	 * @param callback The callback.
-	 */
-	bc.matchMaking.enableMatchMaking = function(callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_ENABLE_MATCH_MAKING,
-			data: {},
-			callback: callback
-		});
-	};
-
-	/**
-	 * Disables Match Making for the Player
-	 *
-	 * Service Name - MatchMaking
-	 * Service Operation - EnableMatchMaking
-	 *
-	 * @param callback The callback.
-	 */
-	bc.matchMaking.disableMatchMaking = function(callback) {
-		bc.brainCloudManager.sendRequest({
-			service: bc.SERVICE_MATCH_MAKING,
-			operation: bc.matchMaking.OPERATION_DISABLE_MATCH_MAKING,
-			data: {},
-			callback: callback
-		});
-	};
-
-}
-
-BCMatchMaking.apply(window.brainCloudClient = window.brainCloudClient || {});
+
+function BCMatchMaking() {
+    var bc = this;
+
+	bc.matchMaking = {};
+
+	bc.SERVICE_MATCH_MAKING = "matchMaking";
+
+	bc.matchMaking.OPERATION_READ                             = "READ";
+	bc.matchMaking.OPERATION_SET_PLAYER_RATING                = "SET_PLAYER_RATING";
+	bc.matchMaking.OPERATION_RESET_PLAYER_RATING              = "RESET_PLAYER_RATING";
+	bc.matchMaking.OPERATION_INCREMENT_PLAYER_RATING          = "INCREMENT_PLAYER_RATING";
+	bc.matchMaking.OPERATION_DECREMENT_PLAYER_RATING          = "DECREMENT_PLAYER_RATING";
+	bc.matchMaking.OPERATION_TURN_SHIELD_ON                   = "SHIELD_ON";
+	bc.matchMaking.OPERATION_TURN_SHIELD_ON_FOR               = "SHIELD_ON_FOR";
+	bc.matchMaking.OPERATION_TURN_SHIELD_OFF                  = "SHIELD_OFF";
+    bc.matchMaking.OPERATION_INCREMENT_SHIELD_ON_FOR          = "INCREMENT_SHIELD_ON_FOR";
+	bc.matchMaking.OPERATION_GET_SHIELD_EXPIRY                = "GET_SHIELD_EXPIRY";
+	bc.matchMaking.OPERATION_FIND_PLAYERS                     = "FIND_PLAYERS";
+	bc.matchMaking.OPERATION_FIND_PLAYERS_USING_FILTER        = "FIND_PLAYERS_USING_FILTER";
+	bc.matchMaking.OPERATION_ENABLE_MATCH_MAKING              = "ENABLE_FOR_MATCH";
+	bc.matchMaking.OPERATION_DISABLE_MATCH_MAKING             = "DISABLE_FOR_MATCH";
+
+
+	/**
+	 * Read match making record
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - Read
+	 *
+	 * @param callback The method to be invoked when the server response is received
+	 */
+	bc.matchMaking.read = function(callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_READ,
+			data: {},
+			callback: callback
+		});
+	};
+
+	/**
+	 * Sets player rating
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - SetPlayerRating
+	 *
+	 * @param playerRating The new player rating.
+	 * @param callback The method to be invoked when the server response is received
+	 */
+	bc.matchMaking.setPlayerRating = function(playerRating, callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_SET_PLAYER_RATING,
+			data: {
+				playerRating: playerRating
+			},
+			callback: callback
+		});
+	};
+
+	/**
+	 * Resets player rating
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - ResetPlayerRating
+	 *
+	 * @param callback The callback function
+	 */
+	bc.matchMaking.resetPlayerRating = function(callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_RESET_PLAYER_RATING,
+			data: {},
+			callback: callback
+		});
+	};
+
+	/**
+	 * Increments player rating
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - IncrementPlayerRating
+	 *
+	 * @param increment The increment amount
+	 * @param callback The callback function
+	 */
+	bc.matchMaking.incrementPlayerRating = function(increment, callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_INCREMENT_PLAYER_RATING,
+			data: {
+				playerRating: increment
+			},
+			callback: callback
+		});
+	};
+
+	/**
+	 * Decrements player rating
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - DecrementPlayerRating
+	 *
+	 * @param decrement The decrement amount
+	 * @param callback The callback function
+	 */
+	bc.matchMaking.decrementPlayerRating = function(decrement, callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_DECREMENT_PLAYER_RATING,
+			data: {
+				playerRating: decrement
+			},
+			callback: callback
+		});
+	};
+
+
+	/**
+	 * Turns shield on
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - ShieldOn
+	 *
+	 * @param callback The callback function
+	 */
+	bc.matchMaking.turnShieldOn = function(callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_TURN_SHIELD_ON,
+			data: {},
+			callback: callback
+		});
+	};
+
+
+	/**
+	 * Turns shield on for the specified number of minutes
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - ShieldOnFor
+	 *
+	 * @param minutes Number of minutes to turn the shield on for
+	 * @param callback The callback function
+	 */
+	bc.matchMaking.turnShieldOnFor = function(minutes, callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_TURN_SHIELD_ON_FOR,
+			data: {
+				minutes: minutes
+			},
+			callback: callback
+		});
+	};
+
+
+	/**
+	 * Turns shield off
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - ShieldOff
+	 *
+	 * @param callback The callback function
+	 */
+	bc.matchMaking.turnShieldOff = function(callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_TURN_SHIELD_OFF,
+			data: {},
+			callback: callback
+		});
+	};
+
+    /**
+     * Increases the shield on time by specified number of minutes
+     *
+     * Service Name - MatchMaking
+     * Service Operation - IncrementShieldOnFor
+     *
+     * @param minutes Number of minutes to increase the shield time for
+     * @param callback The callback function
+     */
+    bc.matchMaking.incrementShieldOnFor = function(minutes, callback) {
+        bc.brainCloudManager.sendRequest({
+            service: bc.SERVICE_MATCH_MAKING,
+            operation: bc.matchMaking.OPERATION_INCREMENT_SHIELD_ON_FOR,
+            data: {
+                minutes: minutes
+            },
+            callback: callback
+        });
+    };
+
+
+	/**
+	 * Gets the shield expiry for the given player id. Passing in a null player id
+	 * will return the shield expiry for the current player. The value returned is
+	 * the time in UTC millis when the shield will expire.
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - GetShieldExpiry
+	 *
+	 * @param playerId The player id or use null to retrieve for the current player
+	 * @param callback The callback.
+	 */
+	bc.matchMaking.getShieldExpiry = function(playerId, callback) {
+		var data = {};
+		if (playerId)
+		{
+			data["playerId"] = playerId;
+		}
+
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_GET_SHIELD_EXPIRY,
+			data: data,
+			callback: callback
+		});
+	};
+
+
+	/**
+	 * Finds matchmaking enabled players
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - FIND_PLAYERS
+	 *
+	 * @param rangeDelta The range delta
+	 * @param numMatches The maximum number of matches to return
+	 * @param callback The callback.
+	 */
+	bc.matchMaking.findPlayers = function(rangeDelta, numMatches, callback) {
+		bc.matchMaking.findPlayersWithAttributes(rangeDelta, numMatches, null, callback);
+	};
+
+	/**
+	 * Finds matchmaking enabled players with additional attributes
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - FIND_PLAYERS
+	 *
+	 * @param rangeDelta The range delta
+	 * @param numMatches The maximum number of matches to return
+	 * @param jsonAttributes Attributes match criteria
+	 * @param callback The method to be invoked when the server response is received
+	 */
+	bc.matchMaking.findPlayersWithAttributes = function(rangeDelta, numMatches, jsonAttributes, callback) {
+		var data = {
+			rangeDelta: rangeDelta,
+			numMatches: numMatches
+		};
+
+		if (jsonAttributes) {
+			data.attributes = jsonAttributes;
+		}
+
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_FIND_PLAYERS,
+			data: data,
+			callback: callback
+		});
+	};
+
+	/**
+	 * @deprecated Use findPlayersUsingFilter instead - Removal after June 21 2016
+	 */
+	bc.matchMaking.findPlayersWithFilter = function(rangeDelta, numMatches, extraParms, callback) {
+		bc.matchMaking.findPlayersUsingFilter(rangeDelta, numMatches, extraParms, callback);
+	};
+
+	/**
+	 * Finds matchmaking enabled players
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - FIND_PLAYERS_WITH_FILTER
+	 *
+	 * @param rangeDelta The range delta
+	 * @param numMatches The maximum number of matches to return
+	 * @param extraParms Other parameters
+	 * @param callback The callback.
+	 */
+	bc.matchMaking.findPlayersUsingFilter = function(rangeDelta, numMatches, extraParms, callback) {
+		bc.matchMaking.findPlayersWithAttributesUsingFilter(rangeDelta, numMatches, null, extraParms, callback);
+	};
+
+	/**
+	 * Finds matchmaking enabled players using a cloud code filter
+	 * and additional attributes
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - FIND_PLAYERS_USING_FILTER
+	 *
+	 * @param rangeDelta The range delta
+	 * @param numMatches The maximum number of matches to return
+	 * @param jsonAttributes Attributes match criteria
+	 * @param jsonExtraParms Parameters to pass to the CloudCode filter script
+	 * @param callback The method to be invoked when the server response is received
+	 */
+	bc.matchMaking.findPlayersWithAttributesUsingFilter = function(rangeDelta, numMatches, jsonAttributes, extraParms, callback) {
+		var data = {
+			rangeDelta: rangeDelta,
+			numMatches: numMatches
+		};
+		if (jsonAttributes) {
+			data.attributes = jsonAttributes;
+		}
+		if (extraParms) {
+			data.extraParms = extraParms;
+		}
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_FIND_PLAYERS_USING_FILTER,
+			data: data,
+			callback: callback
+		});
+	};
+
+	/**
+	 * Enables Match Making for the Player
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - EnableMatchMaking
+	 *
+	 * @param callback The callback.
+	 */
+	bc.matchMaking.enableMatchMaking = function(callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_ENABLE_MATCH_MAKING,
+			data: {},
+			callback: callback
+		});
+	};
+
+	/**
+	 * Disables Match Making for the Player
+	 *
+	 * Service Name - MatchMaking
+	 * Service Operation - EnableMatchMaking
+	 *
+	 * @param callback The callback.
+	 */
+	bc.matchMaking.disableMatchMaking = function(callback) {
+		bc.brainCloudManager.sendRequest({
+			service: bc.SERVICE_MATCH_MAKING,
+			operation: bc.matchMaking.OPERATION_DISABLE_MATCH_MAKING,
+			data: {},
+			callback: callback
+		});
+	};
+
+}
+
+BCMatchMaking.apply(window.brainCloudClient = window.brainCloudClient || {});
 
 function BCOneWayMatch() {
     var bc = this;
@@ -9468,360 +9469,360 @@ function BCTournament() {
 }
 
 BCTournament.apply(window.brainCloudClient = window.brainCloudClient || {});
-//----------------------------------------------------
-// brainCloud client source code
-// Copyright 2016 bitHeads, inc.
-//----------------------------------------------------
-
-function BrainCloudClient() {
-	var bcc = this;
-
-	bcc.name = "BrainCloudClient";
-
-	// If this is not the singleton, initialize it
-	if(window.brainCloudClient !== bcc) {
-		BCAbTest.apply(bcc);
-		BCAsyncMatch.apply(bcc);
-		BCAuthentication.apply(bcc);
-		BCDataStream.apply(bcc);
-		BCEntity.apply(bcc);
-		BCEvents.apply(bcc);
-		BCFile.apply(bcc);
-		BCFriend.apply(bcc);
-		BCGamification.apply(bcc);
-		BCGlobalApp.apply(bcc);
-		BCGlobalStatistics.apply(bcc);
-		BCGlobalEntity.apply(bcc);
-		BCGroup.apply(bcc);
-		BCIdentity.apply(bcc);
-		BCMail.apply(bcc);
-		BCMatchMaking.apply(bcc);
-		BCOneWayMatch.apply(bcc);
-		BCPlaybackStream.apply(bcc);
-		BCPlayerState.apply(bcc);
-		BCPlayerStatistics.apply(bcc);
-		BCPlayerStatisticsEvent.apply(bcc);
-		BCProducts.apply(bcc);
-		BCProfanity.apply(bcc);
-		BCPushNotifications.apply(bcc);
-		BCReasonCodes.apply(bcc);
-		BCRedemptionCodes.apply(bcc);
-		BCS3Handler.apply(bcc);
-		BCScript.apply(bcc);
-		BCSocialLeaderboard.apply(bcc);
-		BCStatusCodes.apply(bcc);
-		BCTime.apply(bcc);
-		BCTournament.apply(bcc);
-
-        bcc.brainCloudManager = new BrainCloudManager();
-
-        bcc.brainCloudManager.abtests = bcc.abtests;
-        bcc.brainCloudManager.asyncMatch = bcc.asyncMatch;
-        bcc.brainCloudManager.authentication = bcc.authentication;
-        bcc.brainCloudManager.dataStream = bcc.dataStream;
-        bcc.brainCloudManager.entity = bcc.entity;
-        bcc.brainCloudManager.event = bcc.event;
-        bcc.brainCloudManager.file = bcc.file;
-        bcc.brainCloudManager.friend = bcc.friend;
-        bcc.brainCloudManager.gamification = bcc.gamification;
-        bcc.brainCloudManager.globalApp = bcc.globalApp;
-        bcc.brainCloudManager.globalStatistics = bcc.globalStatistics;
-        bcc.brainCloudManager.globalEntity = bcc.globalEntity;
-        bcc.brainCloudManager.group = bcc.group;
-        bcc.brainCloudManager.identity = bcc.identity;
-        bcc.brainCloudManager.mail = bcc.mail;
-        bcc.brainCloudManager.matchMaking = bcc.matchMaking;
-        bcc.brainCloudManager.oneWayMatch = bcc.oneWayMatch;
-        bcc.brainCloudManager.playbackStream = bcc.playbackStream;
-        bcc.brainCloudManager.playerState = bcc.playerState;
-        bcc.brainCloudManager.playerStatistics = bcc.playerStatistics;
-        bcc.brainCloudManager.playerStatisticsEvent = bcc.playerStatisticsEvent;
-        bcc.brainCloudManager.product = bcc.product;
-        bcc.brainCloudManager.profanity = bcc.profanity;
-        bcc.brainCloudManager.pushNotification = bcc.pushNotification;
-        bcc.brainCloudManager.reasonCodes = bcc.reasonCodes;
-        bcc.brainCloudManager.redemptionCode = bcc.redemptionCode;
-        bcc.brainCloudManager.s3Handling = bcc.s3Handling;
-        bcc.brainCloudManager.script = bcc.script;
-        bcc.brainCloudManager.socialLeaderboard = bcc.socialLeaderboard;
-        bcc.brainCloudManager.statusCodes = bcc.statusCodes;
-        bcc.brainCloudManager.time = bcc.time;
-        bcc.brainCloudManager.tournament = bcc.tournament;
-
-
-    } else {
-        bcc.brainCloudManager = window.brainCloudManager = window.brainCloudManager || {};
-
-        bcc.brainCloudClient = window.brainCloudClient = window.brainCloudClient || {};
-
-        bcc.brainCloudManager.abtests = bcc.brainCloudClient.abtests  = bcc.brainCloudClient.abtests || {};
-        bcc.brainCloudManager.asyncMatch = bcc.brainCloudClient.asyncMatch = bcc.brainCloudClient.asyncMatch || {};
-        bcc.brainCloudManager.authentication = bcc.brainCloudClient.authentication = bcc.brainCloudClient.authentication || {};
-        bcc.brainCloudManager.dataStream = bcc.brainCloudClient.dataStream = bcc.brainCloudClient.dataStream || {};
-        bcc.brainCloudManager.entity = bcc.brainCloudClient.entity = bcc.brainCloudClient.entity || {};
-        bcc.brainCloudManager.event = bcc.brainCloudClient.event = bcc.brainCloudClient.event || {};
-        bcc.brainCloudManager.file = bcc.brainCloudClient.file = bcc.brainCloudClient.file || {};
-        bcc.brainCloudManager.friend = bcc.brainCloudClient.friend = bcc.brainCloudClient.friend || {};
-        bcc.brainCloudManager.gamification = bcc.brainCloudClient.gamification = bcc.brainCloudClient.gamification || {};
-        bcc.brainCloudManager.globalApp = bcc.brainCloudClient.globalApp = bcc.brainCloudClient.globalApp || {};
-        bcc.brainCloudManager.globalStatistics = bcc.brainCloudClient.globalStatistics = bcc.brainCloudClient.globalStatistics || {};
-        bcc.brainCloudManager.globalEntity = bcc.brainCloudClient.globalEntity = bcc.brainCloudClient.globalEntity || {};
-        bcc.brainCloudManager.group = bcc.brainCloudClient.group = bcc.brainCloudClient.group || {};
-        bcc.brainCloudManager.identity = bcc.brainCloudClient.identity = bcc.brainCloudClient.identity || {};
-        bcc.brainCloudManager.mail = bcc.brainCloudClient.mail = bcc.brainCloudClient.mail || {};
-        bcc.brainCloudManager.matchMaking = bcc.brainCloudClient.matchMaking = bcc.brainCloudClient.matchMaking || {};
-        bcc.brainCloudManager.oneWayMatch = bcc.brainCloudClient.oneWayMatch = bcc.brainCloudClient.oneWayMatch || {};
-        bcc.brainCloudManager.playbackStream = bcc.brainCloudClient.playbackStream = bcc.brainCloudClient.playbackStream || {};
-        bcc.brainCloudManager.playerState = bcc.brainCloudClient.playerState = bcc.brainCloudClient.playerState || {};
-        bcc.brainCloudManager.playerStatistics = bcc.brainCloudClient.playerStatistics = bcc.brainCloudClient.playerStatistics || {};
-        bcc.brainCloudManager.playerStatisticsEvent = bcc.brainCloudClient.playerStatisticsEvent = bcc.brainCloudClient.playerStatisticsEvent || {};
-        bcc.brainCloudManager.product = bcc.brainCloudClient.product = bcc.brainCloudClient.product || {};
-        bcc.brainCloudManager.profanity = bcc.brainCloudClient.profanity = bcc.brainCloudClient.profanity || {};
-        bcc.brainCloudManager.pushNotification = bcc.brainCloudClient.pushNotification = bcc.brainCloudClient.pushNotification || {};
-        bcc.brainCloudManager.reasonCodes = bcc.brainCloudClient.reasonCodes = bcc.brainCloudClient.reasonCodes || {};
-        bcc.brainCloudManager.redemptionCode = bcc.brainCloudClient.redemptionCode = bcc.brainCloudClient.redemptionCode || {};
-        bcc.brainCloudManager.s3Handling = bcc.brainCloudClient.s3Handling = bcc.brainCloudClient.s3Handling || {};
-        bcc.brainCloudManager.script = bcc.brainCloudClient.script = bcc.brainCloudClient.script || {};
-        bcc.brainCloudManager.socialLeaderboard = bcc.brainCloudClient.socialLeaderboard = bcc.brainCloudClient.socialLeaderboard || {};
-        bcc.brainCloudManager.statusCodes = bcc.brainCloudClient.statusCodes = bcc.brainCloudClient.statusCodes || {};
-        bcc.brainCloudManager.time = bcc.brainCloudClient.time = bcc.brainCloudClient.time || {};
-        bcc.brainCloudManager.tournament = bcc.brainCloudClient.tournament = bcc.brainCloudClient.tournament || {};
-	}
-
-
-	bcc.version = "3.7.0";
-	bcc.countryCode;
-	bcc.languageCode;
-
-	/**
-	 * Initializes the brainCloud client with your app information. This method
-	 * must be called before any API method is invoked.
-	 *
-	 * @param {string}
-	 *            appId - The app id
-	 * @param {string}
-	 *            secret - The app secret
-	 * @param {string}
-	 *            version - The app version (e.g. "1.0.0").
-	 */
-	bcc.initialize = function(appId, secret, appVersion) {
-		function isBlank(str) {
-			return (!str || /^\s*$/.test(str));
-		};
-
-		var error = null;
-		if (isBlank(secret))
-			error = "secret was null or empty";
-		else if (isBlank(appId))
-			error = "appId was null or empty";
-		else if (isBlank(appVersion))
-			error = "appVersion was null or empty";
-		if (error != null) {
-			console.log("ERROR | Failed to initialize brainCloud - " + error);
-			return;
-		}
-
-		bcc.brainCloudManager.initialize(appId, secret, appVersion);
-	};
-
-	/**
-	 * Initializes the identity service with the most recently
-	 * used profile id and saved anonymous installation id
-	 *
-	 * @param profileId The id of the profile id that was most recently used by the app (on this device)
-	 * @param anonymousId  The anonymous installation id that was generated for this device
-	 */
-	bcc.initializeIdentity = function(profileId, anonymousId) {
-		bcc.authentication.initialize(profileId, anonymousId);
-	};
-
-	/**
-	 * Sets the brainCloud server URL. Developers should not need to change this
-	 * value.
-	 *
-	 * @param serverUrl
-	 *            {string} - The server URL e.g. "https://sharedprod.braincloudservers.com"
-	 */
-	bcc.setServerUrl = function(serverUrl) {
-		bcc.brainCloudManager.setServerUrl(serverUrl);
-	};
-
-	/**
-	 * Returns the session id if a connection with brainCloud has been established.
-	 *
-	 * @return {string} - The brainCloud session id.
-	 */
-	bcc.getSessionId = function() {
-		return bcc.brainCloudManager.getSessionId();
-	};
-
-	/**
-	 * Sets a callback handler for any out of band messages that come from
-	 * brainCloud (essentially any message sent from brainCloud that wasn't in
-	 * direct response to a client request).
-	 *
-	 * @param eventCallback
-	 *            {function} eventCallback is a function which takes a json object as it's only parameter
-	 *
-	 * where jsonEvents looks like the following:
-	 * {
- 	 *   "events": [{
-	 *      "fromPlayerId": "178ed06a-d575-4591-8970-e23a5d35f9df",
- 	 *      "eventId": 3967,
- 	 *      "createdAt": 1441742105908,
- 	 *      "gameId": "10170",
- 	 *      "toPlayerId": "178ed06a-d575-4591-8970-e23a5d35f9df",
- 	 *      "eventType": "test",
- 	 *      "eventData": {"testData": 117}
- 	 *    }],
- 	 *    ]
- 	 *  }
-	 *
-	 * @see brainCloudClient.events
-	 */
-	bcc.registerEventCallback = function(eventCallback) {
-		bcc.brainCloudManager.registerEventCallback(eventCallback);
-	};
-
-	/**
-	 * Deregisters the event callback.
-	 */
-	bcc.deregisterEventCallback = function() {
-		bcc.brainCloudManager.deregisterEventCallback();
-	};
-
-	/**
-	 * Sets a reward handler for any api call results that return rewards.
-	 *
-	 * @param in_rewardCallback The reward callback handler.
-	 * @see The brainCloud apidocs site for more information on the return JSON
-	 */
-	bcc.registerRewardCallback = function(rewardCallback) {
-		bcc.brainCloudManager.registerRewardCallback(rewardCallback);
-	};
-
-	/**
-	 * Deregisters the reward callback
-	 */
-	bcc.deregisterRewardCallback = function() {
-		bcc.brainCloudManager.deregisterRewardCallback();
-	};
-
-	/**
-	 * Sets a callback handler for any error messages that come from brainCloud.
-	 * This will include any networking errors as well as requests from the client
-	 * which do not register a callback handler.
-	 *
-	 * @param errorCallback
-	 *            {function} - The error callback
-	 */
-	bcc.setErrorCallback = function(errorCallback) {
-		bcc.brainCloudManager.setErrorCallback(errorCallback);
-	};
-
-	/**
-	 * Turns on/off debugging. This will write all requests/responses
-	 * to the javascript console log.
-	 *
-	 * @param debugEnabled
-	 *            {boolean} - True to enable debugging, false otherwise.
-	 */
-	bcc.enableLogging = function(enableLogging) {
-		bcc.brainCloudManager.setDebugEnabled(enableLogging);
-	};
-
-// deprecated
-	bcc.setDebugEnabled = function(debugEnabled) {
-		bcc.brainCloudManager.setDebugEnabled(debugEnabled);
-	};
-
-	/**
-	 * Set this flag to use (or not use) jquery as the underlying
-	 * mechanism to execute http calls. By default, this is true.
-	 *
-	 * @param useJQuery
-	 * {boolean} - True to use JQuery, false otherwise.
-	 */
-	bcc.useJQuery = function(value) {
-		bcc.brainCloudManager.useJQuery(value);
-	};
-
-	/**
-	 * Returns whether the client is initialized.
-	 * @return True if initialized, false otherwise.
-	 */
-	bcc.isInitialized = function() {
-		return bcc.brainCloudManager.isInitialized();
-	};
-
-	/**
-	 * Returns whether the client is authenticated with the brainCloud server.
-	 * @return True if authenticated, false otherwise.
-	 */
-	bcc.isAuthenticated = function() {
-		return bcc.brainCloudManager.isAuthenticated();
-	};
-
-	bcc.resetCommunication = function() {
-        bcc.authentication.profileId = "";
-
-		bcc.brainCloudManager.resetCommunication();
-	};
-
-	/**
-	 * Inserts a marker which will tell the brainCloud comms layer
-	 * to close the message bundle off at this point. Any messages queued
-	 * before this method was called will likely be bundled together in
-	 * the next send to the server.
-	 *
-	 * To ensure that only a single message is sent to the server you would
-	 * do something like this:
-	 *
-	 * InsertEndOfMessageBundleMarker()
-	 * SomeApiCall()
-	 * InsertEndOfMessageBundleMarker()
-	 *
-	 */
-	bcc.insertEndOfMessageBundleMarker = function() {
-		var message = {
-			"operation": "END_BUNDLE_MARKER"
-		};
-		bcc.brainCloudManager.sendRequest(message);
-	};
-
-	/**
-	 * Sets the country code sent to brainCloud when a user authenticates.
-	 * Will override any auto detected country.
-	 * @param countryCode ISO 3166-1 two-letter country code
-	 */
-	bcc.overrideCountryCode = function(countryCode) {
-		bcc.countryCode = countryCode;
-	}
-
-	/**
-	 * Sets the language code sent to brainCloud when a user authenticates.
-	 * If the language is set to a non-ISO 639-1 standard value the app default will be used instead.
-	 * Will override any auto detected language.
-	 * @param languageCode ISO 639-1 two-letter language code
-	 */
-	bcc.overrideLanguageCode = function(languageCode) {
-		brainCloudClient.languageCode = languageCode;
-	}
-
-	bcc.heartbeat = function(callback) {
-		bcc.brainCloudManager.sendRequest({
-			service : "heartbeat",
-			operation : "READ",
-			callback : callback
-		});
-	};
-
-}
-
-/**
- * @deprecated Use of the *singleton* (window.brainCloudClient) has been deprecated. We recommend that you create your own *variable* to hold an instance of the brainCloudWrapper. Explanation here: http://getbraincloud.com/apidocs/release-3-6-5/
- */
-BrainCloudClient.apply(window.brainCloudClient = window.brainCloudClient || {});
+//----------------------------------------------------
+// brainCloud client source code
+// Copyright 2016 bitHeads, inc.
+//----------------------------------------------------
+
+function BrainCloudClient() {
+	var bcc = this;
+
+	bcc.name = "BrainCloudClient";
+
+	// If this is not the singleton, initialize it
+	if(window.brainCloudClient !== bcc) {
+		BCAbTest.apply(bcc);
+		BCAsyncMatch.apply(bcc);
+		BCAuthentication.apply(bcc);
+		BCDataStream.apply(bcc);
+		BCEntity.apply(bcc);
+		BCEvents.apply(bcc);
+		BCFile.apply(bcc);
+		BCFriend.apply(bcc);
+		BCGamification.apply(bcc);
+		BCGlobalApp.apply(bcc);
+		BCGlobalStatistics.apply(bcc);
+		BCGlobalEntity.apply(bcc);
+		BCGroup.apply(bcc);
+		BCIdentity.apply(bcc);
+		BCMail.apply(bcc);
+		BCMatchMaking.apply(bcc);
+		BCOneWayMatch.apply(bcc);
+		BCPlaybackStream.apply(bcc);
+		BCPlayerState.apply(bcc);
+		BCPlayerStatistics.apply(bcc);
+		BCPlayerStatisticsEvent.apply(bcc);
+		BCProducts.apply(bcc);
+		BCProfanity.apply(bcc);
+		BCPushNotifications.apply(bcc);
+		BCReasonCodes.apply(bcc);
+		BCRedemptionCodes.apply(bcc);
+		BCS3Handler.apply(bcc);
+		BCScript.apply(bcc);
+		BCSocialLeaderboard.apply(bcc);
+		BCStatusCodes.apply(bcc);
+		BCTime.apply(bcc);
+		BCTournament.apply(bcc);
+
+        bcc.brainCloudManager = new BrainCloudManager();
+
+        bcc.brainCloudManager.abtests = bcc.abtests;
+        bcc.brainCloudManager.asyncMatch = bcc.asyncMatch;
+        bcc.brainCloudManager.authentication = bcc.authentication;
+        bcc.brainCloudManager.dataStream = bcc.dataStream;
+        bcc.brainCloudManager.entity = bcc.entity;
+        bcc.brainCloudManager.event = bcc.event;
+        bcc.brainCloudManager.file = bcc.file;
+        bcc.brainCloudManager.friend = bcc.friend;
+        bcc.brainCloudManager.gamification = bcc.gamification;
+        bcc.brainCloudManager.globalApp = bcc.globalApp;
+        bcc.brainCloudManager.globalStatistics = bcc.globalStatistics;
+        bcc.brainCloudManager.globalEntity = bcc.globalEntity;
+        bcc.brainCloudManager.group = bcc.group;
+        bcc.brainCloudManager.identity = bcc.identity;
+        bcc.brainCloudManager.mail = bcc.mail;
+        bcc.brainCloudManager.matchMaking = bcc.matchMaking;
+        bcc.brainCloudManager.oneWayMatch = bcc.oneWayMatch;
+        bcc.brainCloudManager.playbackStream = bcc.playbackStream;
+        bcc.brainCloudManager.playerState = bcc.playerState;
+        bcc.brainCloudManager.playerStatistics = bcc.playerStatistics;
+        bcc.brainCloudManager.playerStatisticsEvent = bcc.playerStatisticsEvent;
+        bcc.brainCloudManager.product = bcc.product;
+        bcc.brainCloudManager.profanity = bcc.profanity;
+        bcc.brainCloudManager.pushNotification = bcc.pushNotification;
+        bcc.brainCloudManager.reasonCodes = bcc.reasonCodes;
+        bcc.brainCloudManager.redemptionCode = bcc.redemptionCode;
+        bcc.brainCloudManager.s3Handling = bcc.s3Handling;
+        bcc.brainCloudManager.script = bcc.script;
+        bcc.brainCloudManager.socialLeaderboard = bcc.socialLeaderboard;
+        bcc.brainCloudManager.statusCodes = bcc.statusCodes;
+        bcc.brainCloudManager.time = bcc.time;
+        bcc.brainCloudManager.tournament = bcc.tournament;
+
+
+    } else {
+        bcc.brainCloudManager = window.brainCloudManager = window.brainCloudManager || {};
+
+        bcc.brainCloudClient = window.brainCloudClient = window.brainCloudClient || {};
+
+        bcc.brainCloudManager.abtests = bcc.brainCloudClient.abtests  = bcc.brainCloudClient.abtests || {};
+        bcc.brainCloudManager.asyncMatch = bcc.brainCloudClient.asyncMatch = bcc.brainCloudClient.asyncMatch || {};
+        bcc.brainCloudManager.authentication = bcc.brainCloudClient.authentication = bcc.brainCloudClient.authentication || {};
+        bcc.brainCloudManager.dataStream = bcc.brainCloudClient.dataStream = bcc.brainCloudClient.dataStream || {};
+        bcc.brainCloudManager.entity = bcc.brainCloudClient.entity = bcc.brainCloudClient.entity || {};
+        bcc.brainCloudManager.event = bcc.brainCloudClient.event = bcc.brainCloudClient.event || {};
+        bcc.brainCloudManager.file = bcc.brainCloudClient.file = bcc.brainCloudClient.file || {};
+        bcc.brainCloudManager.friend = bcc.brainCloudClient.friend = bcc.brainCloudClient.friend || {};
+        bcc.brainCloudManager.gamification = bcc.brainCloudClient.gamification = bcc.brainCloudClient.gamification || {};
+        bcc.brainCloudManager.globalApp = bcc.brainCloudClient.globalApp = bcc.brainCloudClient.globalApp || {};
+        bcc.brainCloudManager.globalStatistics = bcc.brainCloudClient.globalStatistics = bcc.brainCloudClient.globalStatistics || {};
+        bcc.brainCloudManager.globalEntity = bcc.brainCloudClient.globalEntity = bcc.brainCloudClient.globalEntity || {};
+        bcc.brainCloudManager.group = bcc.brainCloudClient.group = bcc.brainCloudClient.group || {};
+        bcc.brainCloudManager.identity = bcc.brainCloudClient.identity = bcc.brainCloudClient.identity || {};
+        bcc.brainCloudManager.mail = bcc.brainCloudClient.mail = bcc.brainCloudClient.mail || {};
+        bcc.brainCloudManager.matchMaking = bcc.brainCloudClient.matchMaking = bcc.brainCloudClient.matchMaking || {};
+        bcc.brainCloudManager.oneWayMatch = bcc.brainCloudClient.oneWayMatch = bcc.brainCloudClient.oneWayMatch || {};
+        bcc.brainCloudManager.playbackStream = bcc.brainCloudClient.playbackStream = bcc.brainCloudClient.playbackStream || {};
+        bcc.brainCloudManager.playerState = bcc.brainCloudClient.playerState = bcc.brainCloudClient.playerState || {};
+        bcc.brainCloudManager.playerStatistics = bcc.brainCloudClient.playerStatistics = bcc.brainCloudClient.playerStatistics || {};
+        bcc.brainCloudManager.playerStatisticsEvent = bcc.brainCloudClient.playerStatisticsEvent = bcc.brainCloudClient.playerStatisticsEvent || {};
+        bcc.brainCloudManager.product = bcc.brainCloudClient.product = bcc.brainCloudClient.product || {};
+        bcc.brainCloudManager.profanity = bcc.brainCloudClient.profanity = bcc.brainCloudClient.profanity || {};
+        bcc.brainCloudManager.pushNotification = bcc.brainCloudClient.pushNotification = bcc.brainCloudClient.pushNotification || {};
+        bcc.brainCloudManager.reasonCodes = bcc.brainCloudClient.reasonCodes = bcc.brainCloudClient.reasonCodes || {};
+        bcc.brainCloudManager.redemptionCode = bcc.brainCloudClient.redemptionCode = bcc.brainCloudClient.redemptionCode || {};
+        bcc.brainCloudManager.s3Handling = bcc.brainCloudClient.s3Handling = bcc.brainCloudClient.s3Handling || {};
+        bcc.brainCloudManager.script = bcc.brainCloudClient.script = bcc.brainCloudClient.script || {};
+        bcc.brainCloudManager.socialLeaderboard = bcc.brainCloudClient.socialLeaderboard = bcc.brainCloudClient.socialLeaderboard || {};
+        bcc.brainCloudManager.statusCodes = bcc.brainCloudClient.statusCodes = bcc.brainCloudClient.statusCodes || {};
+        bcc.brainCloudManager.time = bcc.brainCloudClient.time = bcc.brainCloudClient.time || {};
+        bcc.brainCloudManager.tournament = bcc.brainCloudClient.tournament = bcc.brainCloudClient.tournament || {};
+	}
+
+
+	bcc.version = "3.7.0";
+	bcc.countryCode;
+	bcc.languageCode;
+
+	/**
+	 * Initializes the brainCloud client with your app information. This method
+	 * must be called before any API method is invoked.
+	 *
+	 * @param {string}
+	 *            appId - The app id
+	 * @param {string}
+	 *            secret - The app secret
+	 * @param {string}
+	 *            version - The app version (e.g. "1.0.0").
+	 */
+	bcc.initialize = function(appId, secret, appVersion) {
+		function isBlank(str) {
+			return (!str || /^\s*$/.test(str));
+		};
+
+		var error = null;
+		if (isBlank(secret))
+			error = "secret was null or empty";
+		else if (isBlank(appId))
+			error = "appId was null or empty";
+		else if (isBlank(appVersion))
+			error = "appVersion was null or empty";
+		if (error != null) {
+			console.log("ERROR | Failed to initialize brainCloud - " + error);
+			return;
+		}
+
+		bcc.brainCloudManager.initialize(appId, secret, appVersion);
+	};
+
+	/**
+	 * Initializes the identity service with the most recently
+	 * used profile id and saved anonymous installation id
+	 *
+	 * @param profileId The id of the profile id that was most recently used by the app (on this device)
+	 * @param anonymousId  The anonymous installation id that was generated for this device
+	 */
+	bcc.initializeIdentity = function(profileId, anonymousId) {
+		bcc.authentication.initialize(profileId, anonymousId);
+	};
+
+	/**
+	 * Sets the brainCloud server URL. Developers should not need to change this
+	 * value.
+	 *
+	 * @param serverUrl
+	 *            {string} - The server URL e.g. "https://sharedprod.braincloudservers.com"
+	 */
+	bcc.setServerUrl = function(serverUrl) {
+		bcc.brainCloudManager.setServerUrl(serverUrl);
+	};
+
+	/**
+	 * Returns the session id if a connection with brainCloud has been established.
+	 *
+	 * @return {string} - The brainCloud session id.
+	 */
+	bcc.getSessionId = function() {
+		return bcc.brainCloudManager.getSessionId();
+	};
+
+	/**
+	 * Sets a callback handler for any out of band messages that come from
+	 * brainCloud (essentially any message sent from brainCloud that wasn't in
+	 * direct response to a client request).
+	 *
+	 * @param eventCallback
+	 *            {function} eventCallback is a function which takes a json object as it's only parameter
+	 *
+	 * where jsonEvents looks like the following:
+	 * {
+ 	 *   "events": [{
+	 *      "fromPlayerId": "178ed06a-d575-4591-8970-e23a5d35f9df",
+ 	 *      "eventId": 3967,
+ 	 *      "createdAt": 1441742105908,
+ 	 *      "gameId": "10170",
+ 	 *      "toPlayerId": "178ed06a-d575-4591-8970-e23a5d35f9df",
+ 	 *      "eventType": "test",
+ 	 *      "eventData": {"testData": 117}
+ 	 *    }],
+ 	 *    ]
+ 	 *  }
+	 *
+	 * @see brainCloudClient.events
+	 */
+	bcc.registerEventCallback = function(eventCallback) {
+		bcc.brainCloudManager.registerEventCallback(eventCallback);
+	};
+
+	/**
+	 * Deregisters the event callback.
+	 */
+	bcc.deregisterEventCallback = function() {
+		bcc.brainCloudManager.deregisterEventCallback();
+	};
+
+	/**
+	 * Sets a reward handler for any api call results that return rewards.
+	 *
+	 * @param in_rewardCallback The reward callback handler.
+	 * @see The brainCloud apidocs site for more information on the return JSON
+	 */
+	bcc.registerRewardCallback = function(rewardCallback) {
+		bcc.brainCloudManager.registerRewardCallback(rewardCallback);
+	};
+
+	/**
+	 * Deregisters the reward callback
+	 */
+	bcc.deregisterRewardCallback = function() {
+		bcc.brainCloudManager.deregisterRewardCallback();
+	};
+
+	/**
+	 * Sets a callback handler for any error messages that come from brainCloud.
+	 * This will include any networking errors as well as requests from the client
+	 * which do not register a callback handler.
+	 *
+	 * @param errorCallback
+	 *            {function} - The error callback
+	 */
+	bcc.setErrorCallback = function(errorCallback) {
+		bcc.brainCloudManager.setErrorCallback(errorCallback);
+	};
+
+	/**
+	 * Turns on/off debugging. This will write all requests/responses
+	 * to the javascript console log.
+	 *
+	 * @param debugEnabled
+	 *            {boolean} - True to enable debugging, false otherwise.
+	 */
+	bcc.enableLogging = function(enableLogging) {
+		bcc.brainCloudManager.setDebugEnabled(enableLogging);
+	};
+
+// deprecated
+	bcc.setDebugEnabled = function(debugEnabled) {
+		bcc.brainCloudManager.setDebugEnabled(debugEnabled);
+	};
+
+	/**
+	 * Set this flag to use (or not use) jquery as the underlying
+	 * mechanism to execute http calls. By default, this is true.
+	 *
+	 * @param useJQuery
+	 * {boolean} - True to use JQuery, false otherwise.
+	 */
+	bcc.useJQuery = function(value) {
+		bcc.brainCloudManager.useJQuery(value);
+	};
+
+	/**
+	 * Returns whether the client is initialized.
+	 * @return True if initialized, false otherwise.
+	 */
+	bcc.isInitialized = function() {
+		return bcc.brainCloudManager.isInitialized();
+	};
+
+	/**
+	 * Returns whether the client is authenticated with the brainCloud server.
+	 * @return True if authenticated, false otherwise.
+	 */
+	bcc.isAuthenticated = function() {
+		return bcc.brainCloudManager.isAuthenticated();
+	};
+
+	bcc.resetCommunication = function() {
+        bcc.authentication.profileId = "";
+
+		bcc.brainCloudManager.resetCommunication();
+	};
+
+	/**
+	 * Inserts a marker which will tell the brainCloud comms layer
+	 * to close the message bundle off at this point. Any messages queued
+	 * before this method was called will likely be bundled together in
+	 * the next send to the server.
+	 *
+	 * To ensure that only a single message is sent to the server you would
+	 * do something like this:
+	 *
+	 * InsertEndOfMessageBundleMarker()
+	 * SomeApiCall()
+	 * InsertEndOfMessageBundleMarker()
+	 *
+	 */
+	bcc.insertEndOfMessageBundleMarker = function() {
+		var message = {
+			"operation": "END_BUNDLE_MARKER"
+		};
+		bcc.brainCloudManager.sendRequest(message);
+	};
+
+	/**
+	 * Sets the country code sent to brainCloud when a user authenticates.
+	 * Will override any auto detected country.
+	 * @param countryCode ISO 3166-1 two-letter country code
+	 */
+	bcc.overrideCountryCode = function(countryCode) {
+		bcc.countryCode = countryCode;
+	}
+
+	/**
+	 * Sets the language code sent to brainCloud when a user authenticates.
+	 * If the language is set to a non-ISO 639-1 standard value the app default will be used instead.
+	 * Will override any auto detected language.
+	 * @param languageCode ISO 639-1 two-letter language code
+	 */
+	bcc.overrideLanguageCode = function(languageCode) {
+		brainCloudClient.languageCode = languageCode;
+	}
+
+	bcc.heartbeat = function(callback) {
+		bcc.brainCloudManager.sendRequest({
+			service : "heartbeat",
+			operation : "READ",
+			callback : callback
+		});
+	};
+
+}
+
+/**
+ * @deprecated Use of the *singleton* (window.brainCloudClient) has been deprecated. We recommend that you create your own *variable* to hold an instance of the brainCloudWrapper. Explanation here: http://getbraincloud.com/apidocs/release-3-6-5/
+ */
+BrainCloudClient.apply(window.brainCloudClient = window.brainCloudClient || {});
 /**
  * The BrainCloudWrapper provides some convenience functionality to developers when they are
  * getting started with the authentication system.
@@ -10212,13 +10213,13 @@ function BrainCloudWrapper(wrapperName) {
 	 */
 	bcw.reconnect = function(responseHandler) {
 		bcw.authenticateAnonymous(responseHandler);
-	};
-}
-
-/**
- * @deprecated Use of the *singleton* (window.brainCloudWrapper) has been deprecated. We recommend that you create your own *variable* to hold an instance of the brainCloudWrapper. Explanation here: http://getbraincloud.com/apidocs/release-3-6-5/
- */
-BrainCloudWrapper.apply(window.brainCloudWrapper = window.brainCloudWrapper || {});
+	};
+}
+
+/**
+ * @deprecated Use of the *singleton* (window.brainCloudWrapper) has been deprecated. We recommend that you create your own *variable* to hold an instance of the brainCloudWrapper. Explanation here: http://getbraincloud.com/apidocs/release-3-6-5/
+ */
+BrainCloudWrapper.apply(window.brainCloudWrapper = window.brainCloudWrapper || {});
 
 /** 
 * Exporting node modules
